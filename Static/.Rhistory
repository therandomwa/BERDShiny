model_y = lm(ccs_z ~ mn_ln_c + birthlength + mn_ln_c:birthlength + sex + age + momIQ_z + momeducd + protein +
smokenv + homescore_z + momage_c, data = df)
model_y
model_y = lm(ccs_z ~ mn_ln_c:*birthlength + sex + age + momIQ_z + momeducd + protein +
model_y = lm(ccs_z ~ mn_ln_c*birthlength + sex + age + momIQ_z + momeducd + protein +
smokenv + homescore_z + momage_c, data = df)
model_y
coef_y = coef(model_y)
coef_y
theta_1 = coef_y["mn_ln_c"]
theta_1
theta_3 = coef_y["mn_ln_c:birthlength"]
theta_3
coef_m = coef(model_m)
beta_0 = coef_m[1]
beta_0
coef_m
beta_2 = coef_m[3:length(coef_m)]
beta_2
beta_2* c(2,2,2,2,2,2,2,2)
samp = sample(1:nrow(data), nrow(data), replace = TRUE)
df = data[samp,]
# Fit regression for mediation
model_m = lm(birthlength ~ mn_ln_c + sex + age + momIQ_z + momeducd + protein +
smokenv + homescore_z + momage_c, data = df)
coef_m = coef(model_m)
beta_0 = coef_m[1]
beta_1 = coef_m[2]
beta_2s = coef_m[3:length(coef_m)]
# Fit regression for response
model_y = lm(ccs_z ~ mn_ln_c*birthlength + sex + age + momIQ_z + momeducd + protein +
smokenv + homescore_z + momage_c, data = df)
coef_y = coef(model_y)
theta_1 = coef_y["mn_ln_c"]
theta_2 = coef_y["birthlength"]
theta_3 = coef_y["mn_ln_c:birthlength"]
a = "mn_ln_c"
m = "birthlength"
y = "ccs_z"
c = c("sex","age","momIQ_z","momeducd", "protein",
"smokenv", "homescore_z", "momage_c")
data = data[,c(a, m, y, c)]
data = data[complete.cases(data),]
B = 1000
samp = sample(1:nrow(data), nrow(data), replace = TRUE)
df = data[samp,]
# Fit regression for mediation
model_m = lm(m ~ mn_ln_c + sex + age + momIQ_z + momeducd + protein +
smokenv + homescore_z + momage_c, data = df)
# Fit regression for mediation
model_m = lm(birthlength ~ mn_ln_c + sex + age + momIQ_z + momeducd + protein +
smokenv + homescore_z + momage_c, data = df)
# Fit regression for mediation
model_m = lm(m ~ mn_ln_c + sex + age + momIQ_z + momeducd + protein +
smokenv + homescore_z + momage_c, data = df)
# Fit regression for mediation
model_m = lm(get(m) ~ mn_ln_c + sex + age + momIQ_z + momeducd + protein +
smokenv + homescore_z + momage_c, data = df)
model_m
# Fit regression for mediation
model_m = lm(birthlength ~ mn_ln_c + sex + age + momIQ_z + momeducd + protein +
smokenv + homescore_z + momage_c, data = df)
model_m
# Fit regression for mediation
model_m = lm(get(m) ~ mn_ln_c + sex + age + momIQ_z + momeducd + protein +
smokenv + homescore_z + momage_c+get(c), data = df)
model_m
# Fit regression for mediation
model_m = lm(get(m) ~ mn_ln_c + get(c), data = df)
model_m
# Fit regression for mediation
model_m = lm(birthlength ~ mn_ln_c + sex + age + momIQ_z + momeducd + protein +
smokenv + homescore_z + momage_c, data = df)
model_m
get(c)
theta_1 = coef_y[a]
theta_1
paste0(a,":",m)
theta_3 = coef_y[paste0(a,":",m)]
theta_3
nde = (theta_1 + theta_3 * (predict(model_m, mn_ln_c = a1)))
nde
# Calculate effects
cde = (theta_1 + theta_3 * m) * (a - a1)
theta_1
theta_3 * m
# Calculate effects
cde = (theta_1 + theta_3 * data[m]) * (a - a1)
a = 17.8
a1 = 4.72
# Calculate effects
cde = (theta_1 + theta_3 * data[m]) * (a - a1)
cde
predict(model_m, mn_ln_c = a1)
mean(predict(model_m, mn_ln_c = a1))
beta_0+beta_1*a1+beta_2s%*%*data[c]
beta_0+beta_1*a1+beta_2s%*%data[c]
beta_0+beta_1*a1+beta_2s*data[c]
mean(beta_0+beta_1*a1+beta_2s*data[c])
beta_0+beta_1*a1+beta_2s*data[c]
beta_2s
head(data[c])
beta_2s*head(data[c])
beta_0+beta_1*a1+rowsum(beta_2s*data[c])
beta_0+beta_1*a1+rowSum(beta_2s*data[c])
beta_0+beta_1*a1+rowSums(beta_2s*data[c])
predict(model_m, mn_ln_c = a1)
mean(beta_0+beta_1*a1+rowSums(beta_2s*data[c]))
mean(predict(model_m, mn_ln_c = a1))
beta_2s*head(data[c])
beta_2s
head(data[c])
nie = (theta_2 * beta_1 + theta_3 * beta_1 * a) * (a - a1)
nie
nde
# Calculate effects
cde = mean((theta_1 + theta_3 * data[m]) * (a - a1))
nde = mean((theta_1 + theta_3 * (beta_0 + beta_1 * a1 + rowSums(beta_2s * data[c]))) * (a - a1))
(theta_1 + theta_3 * data[m]) * (a - a1)
# Calculate effects
cde = (theta_1 + theta_3 * data[m]) * (a - a1)
cde
mean(cde)
nde = mean((theta_1 + theta_3 * (beta_0 + beta_1 * a1 + rowSums(beta_2s * data[c]))) * (a - a1))
nde
mean((theta_1 + theta_3 * data[m]) * (a - a1))
# Calculate effects
cde = (theta_1 + theta_3 * data[m]) * (a - a1)
data[m]
data[m]
typeof(data[m])
class(data[m])
(theta_1 + theta_3 * data[,m]) * (a - a1)
# Calculate effects
cde = mean((theta_1 + theta_3 * data[,m]) * (a - a1))
cde
nde = mean((theta_1 + theta_3 * (beta_0 + beta_1 * a1 + rowSums(beta_2s * data[,c]))) * (a - a1))
nde
nie = (theta_2 * beta_1 + theta_3 * beta_1 * a) * (a - a1)
nie
matrix(NA, 3, B)
library(here)
data = read.table("bgd_data.txt")
a = "mn_ln_c"
m = "birthlength"
y = "ccs_z"
c = c("sex","age","momIQ_z","momeducd", "protein",
"smokenv", "homescore_z", "momage_c")
data = data[,c(a, m, y, c)]
data = data[complete.cases(data),]
B = 1000
a = 17.8
a1 = 4.72
effects = matrix(NA, 3, B)
for (i in 1:B){
samp = sample(1:nrow(data), nrow(data), replace = TRUE)
df = data[samp,]
# Fit regression for mediation
model_m = lm(birthlength ~ mn_ln_c + sex + age + momIQ_z + momeducd + protein +
smokenv + homescore_z + momage_c, data = df)
coef_m = coef(model_m)
beta_0 = coef_m[1]
beta_1 = coef_m[2]
beta_2s = coef_m[3:length(coef_m)]
# Fit regression for response
model_y = lm(ccs_z ~ mn_ln_c*birthlength + sex + age + momIQ_z + momeducd + protein +
smokenv + homescore_z + momage_c, data = df)
coef_y = coef(model_y)
theta_1 = coef_y[a]
theta_2 = coef_y[m]
theta_3 = coef_y[paste0(a,":",m)]
# Calculate effects
cde = mean((theta_1 + theta_3 * data[,m]) * (a - a1))
nde = mean((theta_1 + theta_3 * (beta_0 + beta_1 * a1 + rowSums(beta_2s * data[,c]))) * (a - a1))
nie = (theta_2 * beta_1 + theta_3 * beta_1 * a) * (a - a1)
effects[1, i] = cde
effects[2, i] = nde
effects[3, i] = nie
}
View(eeffects)
View(effects)
effects = matrix(NA, 3, B)
samp = sample(1:nrow(data), nrow(data), replace = TRUE)
df = data[samp,]
# Fit regression for mediation
model_m = lm(birthlength ~ mn_ln_c + sex + age + momIQ_z + momeducd + protein +
smokenv + homescore_z + momage_c, data = df)
coef_m = coef(model_m)
beta_0 = coef_m[1]
beta_1 = coef_m[2]
beta_2s = coef_m[3:length(coef_m)]
# Fit regression for response
model_y = lm(ccs_z ~ mn_ln_c*birthlength + sex + age + momIQ_z + momeducd + protein +
smokenv + homescore_z + momage_c, data = df)
coef_y = coef(model_y)
theta_1 = coef_y[a]
theta_2 = coef_y[m]
theta_3 = coef_y[paste0(a,":",m)]
# Calculate effects
cde = mean((theta_1 + theta_3 * data[,m]) * (a - a1))
nde = mean((theta_1 + theta_3 * (beta_0 + beta_1 * a1 + rowSums(beta_2s * data[,c]))) * (a - a1))
nie = (theta_2 * beta_1 + theta_3 * beta_1 * a) * (a - a1)
cde
data
data = data[,c(a, m, y, c)]
data = data[complete.cases(data),]
data = read.table("bgd_data.txt")
a = "mn_ln_c"
m = "birthlength"
y = "ccs_z"
c = c("sex","age","momIQ_z","momeducd", "protein",
"smokenv", "homescore_z", "momage_c")
data = data[,c(a, m, y, c)]
data = data[complete.cases(data),]
B = 1000
a = 17.8
a1 = 4.72
effects = matrix(NA, 3, B)
samp = sample(1:nrow(data), nrow(data), replace = TRUE)
df = data[samp,]
# Fit regression for mediation
model_m = lm(birthlength ~ mn_ln_c + sex + age + momIQ_z + momeducd + protein +
smokenv + homescore_z + momage_c, data = df)
coef_m = coef(model_m)
beta_0 = coef_m[1]
beta_1 = coef_m[2]
beta_2s = coef_m[3:length(coef_m)]
beta_0
beta_1
beta_2
beta_2s
# Fit regression for response
model_y = lm(ccs_z ~ mn_ln_c*birthlength + sex + age + momIQ_z + momeducd + protein +
smokenv + homescore_z + momage_c, data = df)
coef_y = coef(model_y)
theta_1 = coef_y[a]
theta_2 = coef_y[m]
theta_3 = coef_y[paste0(a,":",m)]
theta_1
coef_y
coef_y[a]
data = read.table("bgd_data.txt")
a = "mn_ln_c"
m = "birthlength"
y = "ccs_z"
c = c("sex","age","momIQ_z","momeducd", "protein",
"smokenv", "homescore_z", "momage_c")
data = data[,c(a, m, y, c)]
data = data[complete.cases(data),]
B = 1000
a0 = 17.8
a1 = 4.72
samp = sample(1:nrow(data), nrow(data), replace = TRUE)
df = data[samp,]
# Fit regression for mediation
model_m = lm(birthlength ~ mn_ln_c + sex + age + momIQ_z + momeducd + protein +
smokenv + homescore_z + momage_c, data = df)
coef_m = coef(model_m)
beta_0 = coef_m[1]
beta_1 = coef_m[2]
beta_2s = coef_m[3:length(coef_m)]
# Fit regression for response
model_y = lm(ccs_z ~ mn_ln_c*birthlength + sex + age + momIQ_z + momeducd + protein +
smokenv + homescore_z + momage_c, data = df)
coef_y = coef(model_y)
theta_1 = coef_y[a]
theta_2 = coef_y[m]
theta_3 = coef_y[paste0(a,":",m)]
theta_1
theta_2
theta_3
(theta_1 + theta_3 * data[,m]) * (a0 - a1)
# Calculate effects
cde = mean((theta_1 + theta_3 * data[,m]) * (a0 - a1))
nde = mean((theta_1 + theta_3 * (beta_0 + beta_1 * a1 + rowSums(beta_2s * data[,c]))) * (a0 - a1))
nie = (theta_2 * beta_1 + theta_3 * beta_1 * a0) * (a0 - a1)
cde
nde
nie
library(here)
data = read.table("bgd_data.txt")
a = "mn_ln_c"
m = "birthlength"
y = "ccs_z"
c = c("sex","age","momIQ_z","momeducd", "protein",
"smokenv", "homescore_z", "momage_c")
data = data[,c(a, m, y, c)]
data = data[complete.cases(data),]
B = 1000
a0 = 17.8
a1 = 4.72
effects = matrix(NA, 3, B)
for (i in 1:B){
samp = sample(1:nrow(data), nrow(data), replace = TRUE)
df = data[samp,]
# Fit regression for mediation
model_m = lm(birthlength ~ mn_ln_c + sex + age + momIQ_z + momeducd + protein +
smokenv + homescore_z + momage_c, data = df)
coef_m = coef(model_m)
beta_0 = coef_m[1]
beta_1 = coef_m[2]
beta_2s = coef_m[3:length(coef_m)]
# Fit regression for response
model_y = lm(ccs_z ~ mn_ln_c*birthlength + sex + age + momIQ_z + momeducd + protein +
smokenv + homescore_z + momage_c, data = df)
coef_y = coef(model_y)
theta_1 = coef_y[a]
theta_2 = coef_y[m]
theta_3 = coef_y[paste0(a,":",m)]
# Calculate effects
cde = mean((theta_1 + theta_3 * data[,m]) * (a0 - a1))
nde = mean((theta_1 + theta_3 * (beta_0 + beta_1 * a1 + rowSums(beta_2s * data[,c]))) * (a0 - a1))
nie = (theta_2 * beta_1 + theta_3 * beta_1 * a0) * (a0 - a1)
effects[1, i] = cde
effects[2, i] = nde
effects[3, i] = nie
}
mean_effects = rowMeans(effects)
mean_effects
set.seed(1)
set.seed(1)
library(here)
data = read.table("bgd_data.txt")
a = "mn_ln_c"
m = "birthlength"
y = "ccs_z"
c = c("sex","age","momIQ_z","momeducd", "protein",
"smokenv", "homescore_z", "momage_c")
data = data[,c(a, m, y, c)]
data = data[complete.cases(data),]
B = 1000
a0 = 17.8
a1 = 4.72
effects = matrix(NA, 3, B)
for (i in 1:B){
samp = sample(1:nrow(data), nrow(data), replace = TRUE)
df = data[samp,]
# Fit regression for mediation
model_m = lm(birthlength ~ mn_ln_c + sex + age + momIQ_z + momeducd + protein +
smokenv + homescore_z + momage_c, data = df)
coef_m = coef(model_m)
beta_0 = coef_m[1]
beta_1 = coef_m[2]
beta_2s = coef_m[3:length(coef_m)]
# Fit regression for response
model_y = lm(ccs_z ~ mn_ln_c*birthlength + sex + age + momIQ_z + momeducd + protein +
smokenv + homescore_z + momage_c, data = df)
coef_y = coef(model_y)
theta_1 = coef_y[a]
theta_2 = coef_y[m]
theta_3 = coef_y[paste0(a,":",m)]
# Calculate effects
cde = mean((theta_1 + theta_3 * data[,m]) * (a0 - a1))
nde = mean((theta_1 + theta_3 * (beta_0 + beta_1 * a1 + rowSums(beta_2s * data[,c]))) * (a0 - a1))
nie = (theta_2 * beta_1 + theta_3 * beta_1 * a0) * (a0 - a1)
effects[1, i] = cde
effects[2, i] = nde
effects[3, i] = nie
}
mean_effects = rowMeans(effects)
(mean_effects = rowMeans(effects))
rownames(effects) = c("cde", "nde", "nie")
(mean_effects = rowMeans(effects))
(median(effects))
(apply(effects, 1, median))
mean_effects + c(-1, 1) * 2 * apply(effects, 1, sd)
apply(effects, 1, sd)
mean_effects +
++
lk;l
c(-1, 1) * 2 * apply(effects, 1, sd)
c(-1, 1) * 2
mean_effects + 2 * apply(effects, 1, sd)
(mean_effects - 2 * apply(effects, 1, sd), mean_effects + 2 * apply(effects, 1, sd))
c(mean_effects - 2 * apply(effects, 1, sd), mean_effects + 2 * apply(effects, 1, sd))
apply(effects, 1, function(x) mean(x) + c(-1,1) * 2 * sd(x))
conf = apply(effects, 1, function(x) mean(x) + c(-1,1) * 2 * sd(x))
rownames(conf) = c("Lower", "Uppuer")
rownames(conf) = c("Lower", "Upper")
conf
se(effects[1,])
conf = apply(effects, 1, function(x) mean(x) + c(-1,1) * 2 * (sd(x) / sqrt(B)))
rownames(conf) = c("Lower", "Upper")
conf
(mean_effects = rowMeans(effects)) # mean
rbind(mean_effects, median_effects, conf)
median_effects = apply(effects, 1, median) # median
rbind(mean_effects, median_effects, conf)
Mean = rowMeans(effects) # mean
Median = apply(effects, 1, median) # median
conf = apply(effects, 1, function(x) mean(x) + c(-1,1) * 2 * (sd(x) / sqrt(B)))
rownames(conf) = c("Lower", "Upper")
rbind(mean_effects, median_effects, conf)
rbind(Mean, Medians, conf)
rbind(Mean, Median, conf)
conf = apply(effects, 1, function(x) mean(x) + c(-1,1) * 1.962 * (sd(x) / sqrt(B)))
Mean = rowMeans(effects) # mean
Median = apply(effects, 1, median) # median
conf = apply(effects, 1, function(x) mean(x) + c(-1,1) * 1.96 * (sd(x) / sqrt(B)))
rownames(conf) = c("Lower 95%", "Upper 95%")
rbind(Mean, Median, conf)
hist(effects[1,])
hist(effects[1,])
hist(effects[2,])
hist(effects[3,])
xtable::xtable(rbind(Mean, Median, conf))
set.seed(1)
(theta_1 + theta_3 * 47) * (a0 - a1)
data[,c]
head(data[,c])
mean(data[,c])
apply(data[,c], 2, mean)
apply(data[,c], 2, mean) * beta_2s
beta_2s
nde = (theta_1 + theta_3 *
(beta_0 + beta_1 * a1 + beta_2s * apply(data[,c], 2, mean))) * (a0 - a1)
nde
nde = (theta_1 + theta_3 *
(beta_0 + beta_1 * a1 + sum(beta_2s * apply(data[,c], 2, mean))) * (a0 - a1)
nie = (theta_2 * beta_1 + theta_3 * beta_1 * a0) * (a0 - a1)
effects[1, i] = cde
effects[2, i] = nde
effects[3, i] = nie
}
rownames(effects) = c("CDE", "NDE", "NIE")
Mean = rowMeans(effects) # mean
Median = apply(effects, 1, median) # median
conf = apply(effects, 1, function(x) mean(x) + c(-1,1) * 1.96 * (sd(x) / sqrt(B)))
rownames(conf) = c("Lower 95%", "Upper 95%")
xtable::xtable(rbind(Mean, Median, conf))
nde = (theta_1 + theta_3 *
(beta_0 + beta_1 * a1 + sum(beta_2s * apply(data[,c], 2, mean)))) * (a0 - a1)
nde
shiny::runApp('OneDrive - cumc.columbia.edu/BERDShiny/Trial')
runApp('OneDrive - cumc.columbia.edu/BERDShiny/Trial')
runApp('OneDrive - cumc.columbia.edu/BERDShiny/Trial')
runApp('OneDrive - cumc.columbia.edu/BERDShiny/Trial')
trial = readxl::read_excel("Data for CYap.xlsx")
names(trial) <- gsub(" ", "_", names(trial))
trial$DLT = as.factor(trial$DLT)
trial$Evaluable = as.factor(trial$Evaluable)
setwd("~/OneDrive - cumc.columbia.edu/BERDShiny")
trial = readxl::read_excel("Data for CYap.xlsx")
names(trial) <- gsub(" ", "_", names(trial))
trial$DLT = as.factor(trial$DLT)
trial$Evaluable = as.factor(trial$Evaluable)
library(tidyverse)
trial$start_days =  as.numeric(difftime(trial$Therapy_Start_Date,trial$Therapy_Start_Date[1],units="days") + 1)
trial$end_days = as.numeric(difftime(trial$Last,trial$Therapy_Start_Date[1],units="days") + 1)
trial$DLT = factor(trial$DLT, levels = c("Yes", "No"))
ggplot(trial) +
geom_point(aes(x = start_days, y = Dose_Level, colour = Evaluable)) +
geom_point(aes(x = end_days, y = Dose_Level, shape = DLT), colour = "orange") +
scale_shape_manual(values=c("Yes" = 15, "No" = -10), labels = c("Yes" = "DLT", "No" = "")) +
#geom_point(data=subset(trial, DLT=="Yes"), aes(x = end_days, y = Dose_Level), shape = 15, colour = "orange", size = 2) +
geom_text(aes(x = start_days, y = Dose_Level, label = ID), nudge_y = -0.2, size = 2) +
geom_text(data=subset(trial, DLT=="Yes"), aes(x = end_days, y = Dose_Level, label = ID), nudge_y = -0.2, size = 2) +
scale_color_manual(values = c("0" = "skyblue", "1" = "darkgrey")) +
scale_y_continuous(limits = c(0,5)) +
theme_bw()
png(filename = "ha")
dev.off()
png(filename = "ha")
ggplot(trial) +
geom_point(aes(x = start_days, y = Dose_Level, colour = Evaluable)) +
geom_point(aes(x = end_days, y = Dose_Level, shape = DLT), colour = "orange") +
scale_shape_manual(values=c("Yes" = 15, "No" = -10), labels = c("Yes" = "DLT", "No" = "")) +
#geom_point(data=subset(trial, DLT=="Yes"), aes(x = end_days, y = Dose_Level), shape = 15, colour = "orange", size = 2) +
geom_text(aes(x = start_days, y = Dose_Level, label = ID), nudge_y = -0.2, size = 2) +
geom_text(data=subset(trial, DLT=="Yes"), aes(x = end_days, y = Dose_Level, label = ID), nudge_y = -0.2, size = 2) +
scale_color_manual(values = c("0" = "skyblue", "1" = "darkgrey")) +
scale_y_continuous(limits = c(0,5)) +
theme_bw()
dev.off()
png(filename = "ha.png")
ggplot(trial) +
geom_point(aes(x = start_days, y = Dose_Level, colour = Evaluable)) +
geom_point(aes(x = end_days, y = Dose_Level, shape = DLT), colour = "orange") +
scale_shape_manual(values=c("Yes" = 15, "No" = -10), labels = c("Yes" = "DLT", "No" = "")) +
#geom_point(data=subset(trial, DLT=="Yes"), aes(x = end_days, y = Dose_Level), shape = 15, colour = "orange", size = 2) +
geom_text(aes(x = start_days, y = Dose_Level, label = ID), nudge_y = -0.2, size = 2) +
geom_text(data=subset(trial, DLT=="Yes"), aes(x = end_days, y = Dose_Level, label = ID), nudge_y = -0.2, size = 2) +
scale_color_manual(values = c("0" = "skyblue", "1" = "darkgrey")) +
scale_y_continuous(limits = c(0,5)) +
theme_bw()
dev.off()
runApp('Trial')
runApp('Trial')
runApp('Trial')
runApp('Trial')
runApp('Trial')
runApp('Trial')
runApp('Trial')
runApp('Trial')
runApp('Trial')
runApp('Trial')
runApp('Trial')
runApp('Trial')
runApp('Trial')
runApp('Trial')
runApp('Trial')
runApp('Trial')
runApp('Trial')
runApp('Trial')
runApp('Trial')
runApp('Trial')
runApp('Trial')
runApp('copy endpoint.R')
runApp('Trial')
runApp('copy endpoint.R')
runApp('Trial')
setwd("~/OneDrive - cumc.columbia.edu/BERDShiny/Static")
